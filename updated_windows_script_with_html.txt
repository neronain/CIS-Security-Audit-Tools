# CIS Windows 10/11 Security Audit Script with HTML Export
# Version: 2.0
# Author: Security Audit Tool
# Description: ตรวจสอบการตั้งค่าความปลอดภัยของ Windows ตามมาตรฐาน CIS พร้อม HTML Report
# Requires: PowerShell 5.1+, Run as Administrator

param(
    [switch]$Help,
    [switch]$CreateHardening,
    [switch]$ExportResults,
    [switch]$ExportHTML,
    [switch]$ExportCSV,
    [string]$OutputPath = "C:\Temp",
    [string]$ReportTitle = "CIS Windows Security Audit Report",
    [string]$CustomSystemInfo = ""
)

# Global Variables
$script:PassCount = 0
$script:FailCount = 0
$script:WarnCount = 0
$script:TotalChecks = 0
$script:LogFile = ""
$script:Results = @()

# Color definitions for console output
$Colors = @{
    'PASS' = 'Green'
    'FAIL' = 'Red'
    'WARN' = 'Yellow'
    'INFO' = 'Cyan'
    'HEADER' = 'Magenta'
}

# Initialize script
function Initialize-Script {
    Clear-Host
    
    # Check PowerShell version
    if ($PSVersionTable.PSVersion.Major -lt 5) {
        Write-Host "ต้องการ PowerShell 5.1 หรือใหม่กว่า" -ForegroundColor Red
        exit 1
    }
    
    # Check if running as Administrator
    $currentUser = [Security.Principal.WindowsIdentity]::GetCurrent()
    $principal = New-Object Security.Principal.WindowsPrincipal($currentUser)
    if (-not $principal.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)) {
        Write-Host "กรุณารันสคริปต์นี้ในสิทธิ์ Administrator" -ForegroundColor Red
        exit 1
    }
    
    # Create output directory
    if (-not (Test-Path $OutputPath)) {
        New-Item -ItemType Directory -Path $OutputPath -Force | Out-Null
    }
    
    # Set log file path
    $script:LogFile = Join-Path $OutputPath "CIS_Windows_Audit_$(Get-Date -Format 'yyyyMMdd_HHmmss').log"
    
    # Display header
    Write-Host "╔════════════════════════════════════════════════════════════════╗" -ForegroundColor $Colors.HEADER
    Write-Host "║      CIS Windows 10/11 Security Audit Script v2.0             ║" -ForegroundColor $Colors.HEADER
    Write-Host "║                   with HTML Report Export                     ║" -ForegroundColor $Colors.HEADER
    Write-Host "╚════════════════════════════════════════════════════════════════╝" -ForegroundColor $Colors.HEADER
    Write-Host ""
}

# Function to write results
function Write-Result {
    param(
        [string]$Status,
        [string]$CheckID,
        [string]$Description,
        [string]$Details = "",
        [string]$Recommendation = "",
        [string]$RiskLevel = "Medium"
    )
    
    $script:TotalChecks++
    
    # Create result object
    $resultObj = [PSCustomObject]@{
        CheckID = $CheckID
        Status = $Status
        Description = $Description
        Details = $Details
        Recommendation = $Recommendation
        RiskLevel = $RiskLevel
        Timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    }
    
    $script:Results += $resultObj
    
    # Update counters
    switch ($Status) {
        'PASS' { $script:PassCount++ }
        'FAIL' { $script:FailCount++ }
        'WARN' { $script:WarnCount++ }
    }
    
    # Display to console
    $statusText = "[$Status]".PadRight(6)
    $color = $Colors[$Status]
    if ($RiskLevel -eq "Critical" -and $Status -eq "FAIL") {
        $color = 'DarkRed'
    }
    
    Write-Host $statusText -ForegroundColor $color -NoNewline
    Write-Host " $Description"
    
    if ($Details) {
        Write-Host "       รายละเอียด: $Details" -ForegroundColor Gray
    }
    
    if ($Recommendation) {
        Write-Host "       คำแนะนำ: $Recommendation" -ForegroundColor Gray
    }
    
    if ($RiskLevel -eq "Critical") {
        Write-Host "       ⚠️  ระดับความเสี่ยง: สูงมาก" -ForegroundColor DarkRed
    }
    
    # Log to file
    $logEntry = "$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss') [$Status] [$RiskLevel] $CheckID - $Description"
    if ($Details) { $logEntry += " | Details: $Details" }
    if ($Recommendation) { $logEntry += " | Recommendation: $Recommendation" }
    
    Add-Content -Path $script:LogFile -Value $logEntry
}

# Get system and domain information
function Get-SystemInfo {
    Write-Host "`n=== ข้อมูลระบบ ===" -ForegroundColor $Colors.HEADER
    
    $os = Get-CimInstance -ClassName Win32_OperatingSystem
    $computer = Get-CimInstance -ClassName Win32_ComputerSystem
    
    Write-Result "INFO" "SYS001" "OS Version: $($os.Caption) Build $($os.BuildNumber)"
    Write-Result "INFO" "SYS002" "Computer Name: $($computer.Name)"
    Write-Result "INFO" "SYS003" "Domain: $($computer.Domain)"
    Write-Result "INFO" "SYS004" "Total Physical Memory: $([math]::Round($computer.TotalPhysicalMemory/1GB, 2)) GB"
    Write-Result "INFO" "SYS005" "Log File: $script:LogFile"
}

# 1. Account Policies
function Test-AccountPolicies {
    Write-Host "`n=== 1. การตรวจสอบ Account Policies ===" -ForegroundColor $Colors.HEADER
    
    try {
        # Get security policy
        $tempFile = "$env:TEMP\secpol.cfg"
        $secpol = secedit /export /cfg $tempFile /quiet
        
        if (Test-Path $tempFile) {
            $secpolContent = Get-Content $tempFile -ErrorAction SilentlyContinue
            
            if ($secpolContent) {
                # Password Policy
                $minPwdLength = ($secpolContent | Where-Object { $_ -match "MinimumPasswordLength" }) -replace ".*= "
                if ([int]$minPwdLength -ge 14) {
                    Write-Result "PASS" "ACC001" "Minimum Password Length: $minPwdLength"
                } elseif ([int]$minPwdLength -ge 8) {
                    Write-Result "WARN" "ACC001" "Minimum Password Length: $minPwdLength" -Recommendation "แนะนำให้ตั้งค่าเป็น 14 ตัวอักษรหรือมากกว่า"
                } else {
                    Write-Result "FAIL" "ACC001" "Minimum Password Length: $minPwdLength" -RiskLevel "High" -Recommendation "ต้องตั้งค่าอย่างน้อย 8 ตัวอักษร"
                }
                
                # Password complexity
                $pwdComplexity = ($secpolContent | Where-Object { $_ -match "PasswordComplexity" }) -replace ".*= "
                if ($pwdComplexity -eq "1") {
                    Write-Result "PASS" "ACC002" "Password Complexity: เปิดใช้งาน"
                } else {
                    Write-Result "FAIL" "ACC002" "Password Complexity: ปิดใช้งาน" -RiskLevel "High" -Recommendation "ควรเปิดใช้งาน Password Complexity"
                }
                
                # Account lockout threshold
                $lockoutThreshold = ($secpolContent | Where-Object { $_ -match "LockoutBadCount" }) -replace ".*= "
                if ([int]$lockoutThreshold -le 5 -and [int]$lockoutThreshold -gt 0) {
                    Write-Result "PASS" "ACC003" "Account Lockout Threshold: $lockoutThreshold"
                } else {
                    Write-Result "FAIL" "ACC003" "Account Lockout Threshold: $lockoutThreshold" -RiskLevel "Medium" -Recommendation "แนะนำให้ตั้งค่าระหว่าง 1-5"
                }
                
                # Password history
                $pwdHistory = ($secpolContent | Where-Object { $_ -match "PasswordHistorySize" }) -replace ".*= "
                if ([int]$pwdHistory -ge 12) {
                    Write-Result "PASS" "ACC004" "Password History: $pwdHistory passwords"
                } else {
                    Write-Result "WARN" "ACC004" "Password History: $pwdHistory passwords" -Recommendation "แนะนำให้ตั้งค่าอย่างน้อย 12"
                }
                
                # Maximum password age
                $maxPwdAge = ($secpolContent | Where-Object { $_ -match "MaximumPasswordAge" }) -replace ".*= "
                if ([int]$maxPwdAge -le 90 -and [int]$maxPwdAge -gt 0) {
                    Write-Result "PASS" "ACC005" "Maximum Password Age: $maxPwdAge days"
                } else {
                    Write-Result "WARN" "ACC005" "Maximum Password Age: $maxPwdAge days" -Recommendation "แนะนำให้ตั้งค่าระหว่าง 30-90 วัน"
                }
                
                # Minimum password age
                $minPwdAge = ($secpolContent | Where-Object { $_ -match "MinimumPasswordAge" }) -replace ".*= "
                if ([int]$minPwdAge -ge 1) {
                    Write-Result "PASS" "ACC006" "Minimum Password Age: $minPwdAge days"
                } else {
                    Write-Result "WARN" "ACC006" "Minimum Password Age: $minPwdAge days" -Recommendation "แนะนำให้ตั้งค่าอย่างน้อย 1 วัน"
                }
            }
            
            Remove-Item $tempFile -ErrorAction SilentlyContinue
        }
    }
    catch {
        Write-Result "WARN" "ACC999" "ไม่สามารถตรวจสอบ Account Policies ได้" -Details $_.Exception.Message
    }
}

# 2. Local Policies
function Test-LocalPolicies {
    Write-Host "`n=== 2. การตรวจสอบ Local Policies ===" -ForegroundColor $Colors.HEADER
    
    try {
        # Check if Guest account is disabled
        $guestAccount = Get-LocalUser -Name "Guest" -ErrorAction SilentlyContinue
        if ($guestAccount -and -not $guestAccount.Enabled) {
            Write-Result "PASS" "LOC001" "Guest Account: ปิดใช้งาน"
        } elseif ($guestAccount -and $guestAccount.Enabled) {
            Write-Result "FAIL" "LOC001" "Guest Account: เปิดใช้งาน" -RiskLevel "High" -Recommendation "ควรปิดใช้งาน Guest Account"
        } else {
            Write-Result "WARN" "LOC001" "Guest Account: ไม่พบ"
        }
        
        # Check Administrator account rename
        $adminAccount = Get-LocalUser | Where-Object { $_.SID -like "*-500" }
        if ($adminAccount.Name -ne "Administrator") {
            Write-Result "PASS" "LOC002" "Administrator Account: ถูกเปลี่ยนชื่อเป็น '$($adminAccount.Name)'"
        } else {
            Write-Result "WARN" "LOC002" "Administrator Account: ยังใช้ชื่อ 'Administrator'" -Recommendation "ควรเปลี่ยนชื่อ Administrator account"
        }
    }
    catch {
        Write-Result "WARN" "LOC999" "ไม่สามารถตรวจสอบ Local User Accounts ได้" -Details $_.Exception.Message
    }
    
    # Security Options via Registry
    $securityChecks = @(
        @{
            ID = "LOC003"
            Path = "HKLM:\SYSTEM\CurrentControlSet\Control\Session Manager\Memory Management"
            Name = "ClearPageFileAtShutdown"
            ExpectedValue = 1
            Description = "Clear Virtual Memory Pagefile"
            RiskLevel = "Medium"
        },
        @{
            ID = "LOC004"
            Path = "HKLM:\SYSTEM\CurrentControlSet\Control\Lsa"
            Name = "LimitBlankPasswordUse"
            ExpectedValue = 1
            Description = "Accounts: Limit local account use of blank passwords"
            RiskLevel = "High"
        },
        @{
            ID = "LOC005"
            Path = "HKLM:\SYSTEM\CurrentControlSet\Control\Lsa"
            Name = "NoLMHash"
            ExpectedValue = 1
            Description = "Network security: Do not store LAN Manager hash"
            RiskLevel = "Medium"
        },
        @{
            ID = "LOC006"
            Path = "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System"
            Name = "EnableLUA"
            ExpectedValue = 1
            Description = "User Account Control (UAC)"
            RiskLevel = "Critical"
        }
    )
    
    foreach ($check in $securityChecks) {
        try {
            $value = Get-ItemProperty -Path $check.Path -Name $check.Name -ErrorAction SilentlyContinue
            if ($value -and $value.($check.Name) -eq $check.ExpectedValue) {
                Write-Result "PASS" $check.ID $check.Description
            } else {
                $currentValue = if ($value) { $value.($check.Name) } else { "ไม่พบ" }
                Write-Result "FAIL" $check.ID $check.Description -Details "ค่าปัจจุบัน: $currentValue" -Recommendation "ค่าควรเป็น $($check.ExpectedValue)" -RiskLevel $check.RiskLevel
            }
        }
        catch {
            Write-Result "WARN" $check.ID $check.Description -Details "ไม่สามารถอ่านค่า Registry ได้"
        }
    }
}

# 3. Windows Firewall
function Test-WindowsFirewall {
    Write-Host "`n=== 3. การตรวจสอบ Windows Firewall ===" -ForegroundColor $Colors.HEADER
    
    try {
        $firewallProfiles = @('Domain', 'Private', 'Public')
        
        foreach ($profile in $firewallProfiles) {
            $fw = Get-NetFirewallProfile -Name $profile
            
            if ($fw.Enabled -eq $true) {
                Write-Result "PASS" "FW00$($firewallProfiles.IndexOf($profile) + 1)" "Windows Firewall ($profile): เปิดใช้งาน"
            } else {
                Write-Result "FAIL" "FW00$($firewallProfiles.IndexOf($profile) + 1)" "Windows Firewall ($profile): ปิดใช้งาน" -RiskLevel "Critical" -Recommendation "ควรเปิดใช้งาน Firewall"
            }
            
            # Check inbound/outbound rules
            if ($fw.DefaultInboundAction -eq 'Block') {
                Write-Result "PASS" "FW00$($firewallProfiles.IndexOf($profile) + 4)" "Default Inbound Action ($profile): Block"
            } else {
                Write-Result "WARN" "FW00$($firewallProfiles.IndexOf($profile) + 4)" "Default Inbound Action ($profile): $($fw.DefaultInboundAction)" -Recommendation "แนะนำให้ตั้งเป็น Block"
            }
        }
        
        # Check for dangerous firewall rules
        $dangerousRules = Get-NetFirewallRule | Where-Object { 
            $_.Enabled -eq "True" -and 
            $_.Direction -eq "Inbound" -and 
            $_.Action -eq "Allow" -and
            (Get-NetFirewallAddressFilter -AssociatedNetFirewallRule $_).RemoteAddress -contains "Any"
        }
        
        if ($dangerousRules.Count -eq 0) {
            Write-Result "PASS" "FW007" "ไม่พบ Firewall rules ที่อันตราย"
        } else {
            Write-Result "WARN" "FW007" "พบ $($dangerousRules.Count) inbound rules ที่อนุญาต Any address" -Recommendation "ตรวจสอบและจำกัด scope ของ firewall rules"
        }
    }
    catch {
        Write-Result "WARN" "FW999" "ไม่สามารถตรวจสอบ Windows Firewall ได้" -Details $_.Exception.Message
    }
}

# 4. Windows Defender
function Test-WindowsDefender {
    Write-Host "`n=== 4. การตรวจสอบ Windows Defender ===" -ForegroundColor $Colors.HEADER
    
    try {
        $defender = Get-MpPreference -ErrorAction SilentlyContinue
        $status = Get-MpComputerStatus -ErrorAction SilentlyContinue
        
        if ($status) {
            # Real-time protection
            if ($status.RealTimeProtectionEnabled) {
                Write-Result "PASS" "DEF001" "Real-time Protection: เปิดใช้งาน"
            } else {
                Write-Result "FAIL" "DEF001" "Real-time Protection: ปิดใช้งาน" -RiskLevel "Critical" -Recommendation "ควรเปิดใช้งาน Real-time Protection"
            }
            
            # Antivirus signature version
            $signatureAge = (Get-Date) - $status.AntivirusSignatureLastUpdated
            if ($signatureAge.Days -le 7) {
                Write-Result "PASS" "DEF002" "Antivirus Signatures: อัพเดทล่าสุด $($signatureAge.Days) วันที่แล้ว"
            } else {
                Write-Result "WARN" "DEF002" "Antivirus Signatures: อัพเดทล่าสุด $($signatureAge.Days) วันที่แล้ว" -Recommendation "ควรอัพเดท signature"
            }
            
            # Cloud protection
            if ($defender -and $defender.MAPSReporting -ne 0) {
                Write-Result "PASS" "DEF003" "Cloud Protection: เปิดใช้งาน"
            } else {
                Write-Result "WARN" "DEF003" "Cloud Protection: ปิดใช้งาน" -Recommendation "แนะนำให้เปิดใช้งาน Cloud Protection"
            }
            
            # Behavior monitoring
            if ($status.BehaviorMonitorEnabled) {
                Write-Result "PASS" "DEF004" "Behavior Monitoring: เปิดใช้งาน"
            } else {
                Write-Result "WARN" "DEF004" "Behavior Monitoring: ปิดใช้งาน" -Recommendation "แนะนำให้เปิดใช้งาน Behavior Monitoring"
            }
            
            # Check exclusions
            if ($defender.ExclusionPath.Count -eq 0) {
                Write-Result "PASS" "DEF005" "ไม่มี Path Exclusions ที่กำหนด"
            } else {
                Write-Result "WARN" "DEF005" "มี $($defender.ExclusionPath.Count) Path Exclusions" -Details ($defender.ExclusionPath -join ", ") -Recommendation "ตรวจสอบความจำเป็นของ exclusions"
            }
        } else {
            Write-Result "WARN" "DEF999" "ไม่สามารถตรวจสอบ Windows Defender ได้"
        }
    }
    catch {
        Write-Result "WARN" "DEF999" "ไม่สามารถตรวจสอบ Windows Defender ได้" -Details $_.Exception.Message
    }
}

# 5. Windows Updates
function Test-WindowsUpdates {
    Write-Host "`n=== 5. การตรวจสอบ Windows Updates ===" -ForegroundColor $Colors.HEADER
    
    try {
        # Check Windows Update service
        $wuService = Get-Service -Name "wuauserv" -ErrorAction SilentlyContinue
        if ($wuService -and $wuService.Status -eq "Running") {
            Write-Result "PASS" "UPD001" "Windows Update Service: กำลังทำงาน"
        } else {
            Write-Result "WARN" "UPD001" "Windows Update Service: ไม่ทำงาน" -Recommendation "ควรเปิดใช้งาน Windows Update Service"
        }
        
        # Check automatic updates setting
        $auOptions = Get-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\WindowsUpdate\Auto Update" -Name "AUOptions" -ErrorAction SilentlyContinue
        if ($auOptions -and $auOptions.AUOptions -eq 4) {
            Write-Result "PASS" "UPD002" "Automatic Updates: เปิดใช้งาน (Install automatically)"
        } elseif ($auOptions -and $auOptions.AUOptions -eq 3) {
            Write-Result "WARN" "UPD002" "Automatic Updates: Download และแจ้งเตือนการติดตั้ง" -Recommendation "แนะนำให้ตั้งค่าติดตั้งอัตโนมัติ"
        } else {
            Write-Result "FAIL" "UPD002" "Automatic Updates: ปิดใช้งานหรือตั้งค่าไม่เหมาะสม" -RiskLevel "High" -Recommendation "ควรเปิดใช้งาน Automatic Updates"
        }
        
        # Check last update installation
        try {
            $lastUpdate = Get-HotFix | Sort-Object InstalledOn -Descending | Select-Object -First 1
            if ($lastUpdate -and $lastUpdate.InstalledOn) {
                $daysSinceUpdate = (Get-Date) - $lastUpdate.InstalledOn
                if ($daysSinceUpdate.Days -le 30) {
                    Write-Result "PASS" "UPD003" "Last Update: $($daysSinceUpdate.Days) วันที่แล้ว ($($lastUpdate.HotFixID))"
                } else {
                    Write-Result "WARN" "UPD003" "Last Update: $($daysSinceUpdate.Days) วันที่แล้ว ($($lastUpdate.HotFixID))" -Recommendation "ควรตรวจสอบและติดตั้ง updates"
                }
            } else {
                Write-Result "WARN" "UPD003" "ไม่พบข้อมูล Update ล่าสุด"
            }
        }
        catch {
            Write-Result "WARN" "UPD003" "ไม่สามารถตรวจสอบข้อมูล Updates ล่าสุดได้"
        }
        
        # Check Windows Update for Business settings
        $wufbSettings = Get-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate" -ErrorAction SilentlyContinue
        if ($wufbSettings) {
            if ($wufbSettings.DeferFeatureUpdates -eq 1) {
                Write-Result "PASS" "UPD004" "Feature Updates: Deferred (recommended for business)"
            } else {
                Write-Result "WARN" "UPD004" "Feature Updates: Not deferred" -Recommendation "พิจารณา defer feature updates สำหรับ business environment"
            }
        }
    }
    catch {
        Write-Result "WARN" "UPD999" "ไม่สามารถตรวจสอบ Windows Updates ได้" -Details $_.Exception.Message
    }
}

# Function to generate HTML report
function Export-HTMLReport {
    param(
        [string]$OutputPath = "C:\Temp",
        [string]$Title = "CIS Windows Security Audit Report"
    )
    
    $htmlFile = Join-Path $OutputPath "CIS_Windows_Audit_Report_$(Get-Date -Format 'yyyyMMdd_HHmmss').html"
    
    Write-Host "`nสร้างรายงาน HTML..." -ForegroundColor Cyan
    
    # Get system information
    $os = Get-CimInstance -ClassName Win32_OperatingSystem
    $computer = Get-CimInstance -ClassName Win32_ComputerSystem
    $systemName = $computer.Name
    $osVersion = "$($os.Caption) Build $($os.BuildNumber)"
    $auditDate = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    $domain = $computer.Domain
    $generationTime = Get-Date -Format "yyyy-MM-dd HH:mm:ss K"
    
    # Calculate security score
    $securityScore = 0
    if ($script:TotalChecks -gt 0) {
        $securityScore = [math]::Round(($script:PassCount * 100) / $script:TotalChecks, 1)
    }
    
    # Determine security level
    $securityLevel = "ต้องปรับปรุง"
    $securityLevelClass = "level-poor"
    if ($securityScore -ge 85) {
        $securityLevel = "ดีเยี่ยม"
        $securityLevelClass = "level-excellent"
    } elseif ($securityScore -ge 70) {
        $securityLevel = "ดี"
        $securityLevelClass = "level-good"
    } elseif ($securityScore -ge 50) {
        $securityLevel = "ปานกลาง"
        $securityLevelClass = "level-medium"
    }
    
    # Count critical issues
    $criticalCount = ($script:Results | Where-Object { $_.RiskLevel -eq "Critical" -and $_.Status -eq "FAIL" }).Count
    
    # HTML Template with embedded CSS and JavaScript
    $htmlTemplate = @"
<!DOCTYPE html>
<html lang="th">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>$Title</title>
    <style>
        :root {
            --primary-color: #2563eb; --success-color: #059669; --warning-color: #d97706;
            --danger-color: #dc2626; --critical-color: #7c2d12; --info-color: #0891b2;
            --bg-light: #f8fafc; --bg-white: #ffffff; --text-dark: #1f2937;
            --text-gray: #6b7280; --border-color: #e5e7eb;
            --shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1);
            --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
        }
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; background-color: var(--bg-light); color: var(--text-dark); line-height: 1.6; }
        .container { max-width: 1400px; margin: 0 auto; padding: 20px; }
        .header { background: linear-gradient(135deg, var(--primary-color) 0%, #1d4ed8 100%); color: white; padding: 2rem; border-radius: 12px; margin-bottom: 2rem; box-shadow: var(--shadow-lg); }
        .header h1 { font-size: 2.5rem; font-weight: 700; margin-bottom: 0.5rem; }
        .header p { font-size: 1.1rem; opacity: 0.9; }
        .system-info { display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 1rem; margin-bottom: 2rem; }
        .info-card { background: var(--bg-white); padding: 1.5rem; border-radius: 8px; box-shadow: var(--shadow); border-left: 4px solid var(--primary-color); }
        .info-card h3 { color: var(--text-gray); font-size: 0.875rem; font-weight: 600; text-transform: uppercase; letter-spacing: 0.05em; margin-bottom: 0.5rem; }
        .info-card p { font-size: 1.125rem; font-weight: 600; color: var(--text-dark); }
        .dashboard { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 1.5rem; margin-bottom: 2rem; }
        .metric-card { background: var(--bg-white); padding: 1.5rem; border-radius: 12px; box-shadow: var(--shadow); text-align: center; position: relative; overflow: hidden; }
        .metric-card::before { content: ''; position: absolute; top: 0; left: 0; right: 0; height: 4px; }
        .metric-card.pass::before { background: var(--success-color); }
        .metric-card.fail::before { background: var(--danger-color); }
        .metric-card.warn::before { background: var(--warning-color); }
        .metric-card.critical::before { background: var(--critical-color); }
        .metric-number { font-size: 3rem; font-weight: 700; margin-bottom: 0.5rem; }
        .metric-card.pass .metric-number { color: var(--success-color); }
        .metric-card.fail .metric-number { color: var(--danger-color); }
        .metric-card.warn .metric-number { color: var(--warning-color); }
        .metric-card.critical .metric-number { color: var(--critical-color); }
        .metric-label { font-size: 1rem; color: var(--text-gray); font-weight: 500; }
        .security-score { background: var(--bg-white); padding: 2rem; border-radius: 12px; box-shadow: var(--shadow); margin-bottom: 2rem; text-align: center; }
        .score-text { font-size: 3rem; font-weight: 700; color: var(--text-dark); }
        .score-label { font-size: 1.25rem; color: var(--text-gray); margin-bottom: 1rem; }
        .score-level { display: inline-block; padding: 0.5rem 1rem; border-radius: 20px; font-weight: 600; text-transform: uppercase; letter-spacing: 0.05em; }
        .level-excellent { background: #d1fae5; color: var(--success-color); }
        .level-good { background: #dbeafe; color: var(--primary-color); }
        .level-medium { background: #fef3c7; color: var(--warning-color); }
        .level-poor { background: #fecaca; color: var(--danger-color); }
        .progress-bar { width: 100%; height: 20px; background: #e5e7eb; border-radius: 10px; overflow: hidden; margin: 1rem 0; }
        .progress-fill { height: 100%; border-radius: 10px; transition: width 0.5s ease; background: linear-gradient(90deg, var(--danger-color) 0%, var(--warning-color) 50%, var(--success-color) 100%); }
        .filters { background: var(--bg-white); padding: 1.5rem; border-radius: 12px; box-shadow: var(--shadow); margin-bottom: 2rem; display: flex; gap: 1rem; flex-wrap: wrap; align-items: center; }
        .filter-group { display: flex; align-items: center; gap: 0.5rem; }
        .filter-group label { font-weight: 500; color: var(--text-dark); }
        select, input { padding: 0.5rem; border: 1px solid var(--border-color); border-radius: 6px; font-size: 0.875rem; }
        .btn { padding: 0.5rem 1rem; border: none; border-radius: 6px; font-weight: 500; cursor: pointer; transition: all 0.2s; }
        .btn-primary { background: var(--primary-color); color: white; }
        .btn-primary:hover { background: #1d4ed8; }
        .results-section { background: var(--bg-white); border-radius: 12px; box-shadow: var(--shadow); overflow: hidden; margin-bottom: 2rem; }
        .section-header { background: #f9fafb; padding: 1.5rem; border-bottom: 1px solid var(--border-color); }
        .section-title { font-size: 1.5rem; font-weight: 700; color: var(--text-dark); }
        table { width: 100%; border-collapse: collapse; }
        th { background: #f9fafb; padding: 1rem; text-align: left; font-weight: 600; color: var(--text-dark); border-bottom: 1px solid var(--border-color); }
        td { padding: 1rem; border-bottom: 1px solid #f3f4f6; word-wrap: break-word; max-width: 300px; }
        tr:hover { background: #f9fafb; }
        .status-badge { display: inline-block; padding: 0.25rem 0.75rem; border-radius: 20px; font-size: 0.75rem; font-weight: 600; text-transform: uppercase; }
        .status-pass { background: #d1fae5; color: var(--success-color); }
        .status-fail { background: #fecaca; color: var(--danger-color); }
        .status-warn { background: #fef3c7; color: var(--warning-color); }
        .status-info { background: #dbeafe; color: var(--info-color); }
        .risk-critical { background: #fef2f2; color: var(--critical-color); }
        .risk-high { background: #fecaca; color: var(--danger-color); }
        .risk-medium { background: #fef3c7; color: var(--warning-color); }
        .risk-low { background: #d1fae5; color: var(--success-color); }
        .critical-alert { background: #fef2f2; border: 1px solid #fecaca; border-radius: 8px; padding: 1rem; margin-bottom: 2rem; }
        .critical-alert h3 { color: var(--danger-color); margin-bottom: 0.5rem; }
        .critical-alert ul { margin-left: 1rem; color: var(--text-dark); }
        .recommendations { background: var(--bg-white); padding: 2rem; border-radius: 12px; box-shadow: var(--shadow); margin-bottom: 2rem; }
        .recommendation-item { background: #fef9e7; border-left: 4px solid var(--warning-color); padding: 1rem; margin-bottom: 1rem; border-radius: 0 6px 6px 0; }
        .recommendation-title { font-weight: 600; color: var(--text-dark); margin-bottom: 0.5rem; }
        .recommendation-desc { color: var(--text-gray); font-size: 0.9rem; }
        .footer { text-align: center; padding: 2rem; color: var(--text-gray); border-top: 1px solid var(--border-color); margin-top: 2rem; }
        @media (max-width: 768px) { .dashboard { grid-template-columns: repeat(2, 1fr); } .filters { flex-direction: column; align-items: stretch; } table { font-size: 0.875rem; } }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>🔐 $Title</h1>
            <p>รายงานการตรวจสอบความปลอดภัยระบบ Windows ตามมาตรฐาน CIS</p>
        </div>

        <div class="system-info">
            <div class="info-card"><h3>System</h3><p>$systemName</p></div>
            <div class="info-card"><h3>OS Version</h3><p>$osVersion</p></div>
            <div class="info-card"><h3>Audit Date</h3><p>$auditDate</p></div>
            <div class="info-card"><h3>Domain</h3><p>$domain</p></div>
        </div>

        <div class="security-score">
            <h2>Security Score</h2>
            <div class="score-text">$securityScore</div>
            <div class="progress-bar">
                <div class="progress-fill" style="width: ${securityScore}%"></div>
            </div>
            <div class="score-label">คะแนนความปลอดภัยโดยรวม</div>
            <div class="score-level $securityLevelClass">$securityLevel</div>
        </div>

        <div class="dashboard">
            <div class="metric-card pass">
                <div class="metric-number">$($script:PassCount)</div>
                <div class="metric-label">Passed</div>
            </div>
            <div class="metric-card fail">
                <div class="metric-number">$($script:FailCount)</div>
                <div class="metric-label">Failed</div>
            </div>
            <div class="metric-card warn">
                <div class="metric-number">$($script:WarnCount)</div>
                <div class="metric-label">Warnings</div>
            </div>
            <div class="metric-card critical">
                <div class="metric-number">$criticalCount</div>
                <div class="metric-label">Critical Issues</div>
            </div>
        </div>
"@

    # Generate critical alert section
    $criticalIssues = $script:Results | Where-Object { $_.RiskLevel -eq "Critical" -and $_.Status -eq "FAIL" }
    if ($criticalIssues) {
        $criticalList = ($criticalIssues | ForEach-Object { "<li>$($_.Description)</li>" }) -join ""
        $htmlTemplate += @"

        <div class="critical-alert">
            <h3>⚠️ ปัญหาที่ต้องแก้ไขด่วน</h3>
            <ul>$criticalList</ul>
        </div>
"@
    }

    # Add filters and table
    $htmlTemplate += @"

        <div class="filters">
            <div class="filter-group">
                <label for="statusFilter">Status:</label>
                <select id="statusFilter" onchange="filterResults()">
                    <option value="">All</option>
                    <option value="PASS">Pass</option>
                    <option value="FAIL">Fail</option>
                    <option value="WARN">Warning</option>
                    <option value="INFO">Info</option>
                </select>
            </div>
            <div class="filter-group">
                <label for="riskFilter">Risk Level:</label>
                <select id="riskFilter" onchange="filterResults()">
                    <option value="">All</option>
                    <option value="Critical">Critical</option>
                    <option value="High">High</option>
                    <option value="Medium">Medium</option>
                    <option value="Low">Low</option>
                </select>
            </div>
            <div class="filter-group">
                <label for="searchFilter">Search:</label>
                <input type="text" id="searchFilter" placeholder="Search descriptions..." onkeyup="filterResults()">
            </div>
            <button class="btn btn-primary" onclick="exportCSV()">📄 Export CSV</button>
            <button class="btn btn-primary" onclick="window.print()">🖨️ Print</button>
        </div>

        <div class="results-section">
            <div class="section-header">
                <h2 class="section-title">Security Check Results</h2>
                <span style="float: right; color: var(--text-gray);">Total: $($script:TotalChecks) checks</span>
            </div>
            <div style="overflow-x: auto;">
                <table id="resultsTable">
                    <thead>
                        <tr>
                            <th>Check ID</th>
                            <th>Status</th>
                            <th>Description</th>
                            <th>Risk Level</th>
                            <th>Details</th>
                            <th>Recommendation</th>
                        </tr>
                    </thead>
                    <tbody>
"@

    # Generate table rows
    foreach ($result in $script:Results) {
        $statusClass = "status-" + $result.Status.ToLower()
        $riskClass = "risk-" + $result.RiskLevel.ToLower()
        
        $htmlTemplate += @"
                        <tr>
                            <td>$($result.CheckID)</td>
                            <td><span class="status-badge $statusClass">$($result.Status)</span></td>
                            <td>$($result.Description)</td>
                            <td><span class="status-badge $riskClass">$($result.RiskLevel)</span></td>
                            <td>$($result.Details)</td>
                            <td>$($result.Recommendation)</td>
                        </tr>
"@
    }

    # Generate recommendations
    $recommendationsList = ""
    if ($script:FailCount -gt 0 -or $script:WarnCount -gt 0) {
        $recommendationsList = @"
        <div class="recommendation-item">
            <div class="recommendation-title">1. แก้ไขปัญหาความปลอดภัยที่สำคัญ</div>
            <div class="recommendation-desc">ตรวจสอบและแก้ไขรายการที่มีสถานะ FAIL ทันที โดยเฉพาะปัญหาระดับ Critical</div>
        </div>
        <div class="recommendation-item">
            <div class="recommendation-title">2. อัพเดท Windows และ Security Patches</div>
            <div class="recommendation-desc">ติดตั้ง Windows Updates และ security patches ให้เป็นปัจจุบัน</div>
        </div>
        <div class="recommendation-item">
            <div class="recommendation-title">3. ตรวจสอบการตั้งค่า Windows Defender</div>
            <div class="recommendation-desc">ตรวจสอบและปรับปรุงการตั้งค่า antivirus และ firewall</div>
        </div>
        <div class="recommendation-item">
            <div class="recommendation-title">4. ทำการ Backup และ Recovery Plan</div>
            <div class="recommendation-desc">ตั้งค่า automated backup และทดสอบ disaster recovery procedures</div>
        </div>
"@
    } else {
        $recommendationsList = @"
        <div class="recommendation-item">
            <div class="recommendation-title">✅ ระบบมีความปลอดภัยในระดับดี</div>
            <div class="recommendation-desc">ควรคงมาตรฐานปัจจุบันและติดตามการปรับปรุงอย่างต่อเนื่อง</div>
        </div>
"@
    }

    # Complete the HTML
    $htmlTemplate += @"
                    </tbody>
                </table>
            </div>
        </div>

        <div class="recommendations">
            <h2>💡 คำแนะนำการปรับปรุง</h2>
            $recommendationsList
        </div>

        <div class="footer">
            <p>Generated by CIS Windows Security Audit Script | $generationTime</p>
            <p>สำหรับข้อมูลเพิ่มเติม โปรดอ้างอิง CIS Benchmarks และ security best practices</p>
        </div>
    </div>

    <script>
        function filterResults() {
            const statusFilter = document.getElementById('statusFilter').value;
            const riskFilter = document.getElementById('riskFilter').value;
            const searchFilter = document.getElementById('searchFilter').value.toLowerCase();
            const tbody = document.querySelector('#resultsTable tbody');
            const rows = tbody.getElementsByTagName('tr');

            let visibleCount = 0;
            for (let row of rows) {
                let show = true;
                const cells = row.getElementsByTagName('td');
                
                if (cells.length > 0) {
                    const status = cells[1].textContent.trim();
                    const description = cells[2].textContent.toLowerCase();
                    const risk = cells[3].textContent.trim();

                    if (statusFilter && !status.includes(statusFilter)) show = false;
                    if (riskFilter && !risk.includes(riskFilter)) show = false;
                    if (searchFilter && !description.includes(searchFilter)) show = false;
                }

                row.style.display = show ? '' : 'none';
                if (show) visibleCount++;
            }

            // Update section header with visible count
            const sectionTitle = document.querySelector('.section-title');
            const totalSpan = sectionTitle.parentElement.querySelector('span');
            if (totalSpan) {
                totalSpan.textContent = 'Showing: ' + visibleCount + ' of $($script:TotalChecks) checks';
            }
        }

        function exportCSV() {
            const table = document.querySelector('table');
            const rows = Array.from(table.getElementsByTagName('tr'));
            const visibleRows = rows.filter(row => row.style.display !== 'none');
            
            let csv = '';
            visibleRows.forEach(row => {
                const cells = Array.from(row.getElementsByTagName('td')).concat(Array.from(row.getElementsByTagName('th')));
                const rowData = cells.map(cell => '"' + cell.textContent.replace(/"/g, '""') + '"').join(',');
                csv += rowData + '\n';
            });

            const blob = new Blob([csv], { type: 'text/csv' });
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = 'windows_security_audit_filtered_' + new Date().toISOString().split('T')[0] + '.csv';
            a.click();
            window.URL.revokeObjectURL(url);
        }

        // Initialize
        document.addEventListener('DOMContentLoaded', function() {
            // Animate numbers on load
            const numbers = document.querySelectorAll('.metric-number');
            numbers.forEach(num => {
                const target = parseInt(num.textContent);
                let current = 0;
                const increment = target / 20;
                const timer = setInterval(() => {
                    current += increment;
                    if (current >= target) {
                        current = target;
                        clearInterval(timer);
                    }
                    num.textContent = Math.floor(current);
                }, 50);
            });
        });
    </script>
</body>
</html>
"@

    # Write HTML file
    $htmlTemplate | Out-File -FilePath $htmlFile -Encoding UTF8
    
    Write-Host "HTML Report สร้างเสร็จแล้ว: $htmlFile" -ForegroundColor Green
    Write-Host "เปิดไฟล์ด้วย web browser เพื่อดูรายงาน" -ForegroundColor Cyan
    
    # Try to open with default browser
    try {
        Start-Process $htmlFile
    } catch {
        Write-Host "ไม่สามารถเปิดไฟล์อัตโนมัติได้ กรุณาเปิดไฟล์: $htmlFile" -ForegroundColor Yellow
    }
}

# Function to export CSV report
function Export-CSVReport {
    param(
        [string]$OutputPath = "C:\Temp"
    )
    
    $csvFile = Join-Path $OutputPath "CIS_Windows_Audit_Results_$(Get-Date -Format 'yyyyMMdd_HHmmss').csv"
    
    Write-Host "`nสร้างรายงาน CSV..." -ForegroundColor Cyan
    
    $script:Results | Export-Csv -Path $csvFile -NoTypeInformation -Encoding UTF8
    
    Write-Host "CSV Report สร้างเสร็จแล้ว: $csvFile" -ForegroundColor Green
}

# Generate summary report
function Show-Summary {
    Write-Host "`n=== สรุปผลการตรวจสอบ ===" -ForegroundColor $Colors.HEADER
    Write-Host "ผ่าน (PASS): $script:PassCount" -ForegroundColor $Colors.PASS
    Write-Host "ไม่ผ่าน (FAIL): $script:FailCount" -ForegroundColor $Colors.FAIL
    Write-Host "เตือน (WARN): $script:WarnCount" -ForegroundColor $Colors.WARN
    Write-Host "รวมการตรวจสอบ: $script:TotalChecks" -ForegroundColor White
    
    if ($script:TotalChecks -gt 0) {
        $securityScore = [math]::Round(($script:PassCount * 100) / $script:TotalChecks, 1)
        Write-Host "คะแนนความปลอดภัย: $securityScore/100" -ForegroundColor Cyan
        
        if ($securityScore -ge 85) {
            Write-Host "ระดับความปลอดภัย: ดีเยี่ยม" -ForegroundColor $Colors.PASS
        } elseif ($securityScore -ge 70) {
            Write-Host "ระดับความปลอดภัย: ดี" -ForegroundColor $Colors.PASS
        } elseif ($securityScore -ge 50) {
            Write-Host "ระดับความปลอดภัย: ปานกลาง" -ForegroundColor $Colors.WARN
        } else {
            Write-Host "ระดับความปลอดภัย: ต้องปรับปรุงด่วน" -ForegroundColor $Colors.FAIL
        }
    }
    
    # Show critical issues
    $criticalIssues = $script:Results | Where-Object { $_.RiskLevel -eq "Critical" -and $_.Status -eq "FAIL" }
    if ($criticalIssues) {
        Write-Host "`n⚠️  ปัญหาที่ต้องแก้ไขด่วน:" -ForegroundColor Red
        foreach ($issue in $criticalIssues) {
            Write-Host "   • $($issue.Description)" -ForegroundColor Red
        }
    }
    
    Write-Host "`nรายงานแบบละเอียดถูกบันทึกไว้ที่: $script:LogFile" -ForegroundColor Cyan
    
    if ($script:FailCount -gt 0 -or $script:WarnCount -gt 0) {
        Write-Host "`n=== คำแนะนำการปรับปรุง ===" -ForegroundColor $Colors.WARN
        Write-Host "1. แก้ไขปัญหาที่มีสถานะ FAIL และ RiskLevel Critical ทันที"
        Write-Host "2. ตรวจสอบและแก้ไขรายการที่มีสถานะ FAIL อื่นๆ"
        Write-Host "3. พิจารณาแก้ไขรายการที่มีสถานะ WARN ตามความเหมาะสม"
        Write-Host "4. ทำการ backup การตั้งค่าก่อนแก้ไข"
        Write-Host "5. ติดตั้ง Windows Updates และ security patches"
        Write-Host "6. ตั้งค่า monitoring และ alerting"
    }
    
    # Export reports if requested
    if ($ExportHTML) {
        Export-HTMLReport -OutputPath $OutputPath -Title $ReportTitle
    }
    
    if ($ExportCSV -or $ExportResults) {
        Export-CSVReport -OutputPath $OutputPath
    }
}

# Show help
function Show-Help {
    Write-Host "CIS Windows 10/11 Security Audit Script v2.0" -ForegroundColor $Colors.HEADER
    Write-Host "การใช้งาน: .\CIS_Windows_Audit.ps1 [parameters]" -ForegroundColor White
    Write-Host ""
    Write-Host "Parameters:" -ForegroundColor Cyan
    Write-Host "  -Help                   แสดงคำอธิบายการใช้งาน"
    Write-Host "  -CreateHardening        สร้าง hardening script"
    Write-Host "  -ExportResults          Export ผลลัพธ์เป็น CSV"
    Write-Host "  -ExportHTML             Export ผลลัพธ์เป็น HTML"
    Write-Host "  -ExportCSV              Export ผลลัพธ์เป็น CSV"
    Write-Host "  -OutputPath <path>      กำหนด path สำหรับ output files (default: C:\Temp)"
    Write-Host "  -ReportTitle <title>    กำหนดชื่อรายงาน"
    Write-Host "  -CustomSystemInfo <json> ข้อมูลระบบเพิ่มเติม (JSON format)"
    Write-Host ""
    Write-Host "ตัวอย่าง:" -ForegroundColor Yellow
    Write-Host "  .\CIS_Windows_Audit.ps1 -ExportHTML"
    Write-Host "  .\CIS_Windows_Audit.ps1 -ExportHTML -ExportCSV -OutputPath D:\SecurityReports"
    Write-Host "  .\CIS_Windows_Audit.ps1 -ExportHTML -ReportTitle 'Custom Security Report'"
    Write-Host ""
    Write-Host "หมายเหตุ: ต้องรันในสิทธิ์ Administrator" -ForegroundColor Red
}

# Create hardening script
function New-HardeningScript {
    $hardeningScript = @"
# CIS Windows 10/11 Hardening Script
# ใช้ความระมัดระวังในการรัน script นี้
# แนะนำให้ backup การตั้งค่าและทดสอบในสภาพแวดล้อม test ก่อน

Write-Host "สคริปต์นี้จะทำการ hardening ระบบ Windows ตาม CIS" -ForegroundColor Yellow
Write-Host "กรุณา backup การตั้งค่าปัจจุบันก่อน" -ForegroundColor Red
`$confirm = Read-Host "ต้องการดำเนินการต่อหรือไม่? (y/N)"

if (`$confirm -ne 'y' -and `$confirm -ne 'Y') {
    Write-Host "ยกเลิกการดำเนินการ" -ForegroundColor Red
    exit
}

Write-Host "เริ่มการ hardening ระบบ..." -ForegroundColor Green

# Create system restore point
Write-Host "สร้าง System Restore Point..." -ForegroundColor Cyan
Checkpoint-Computer -Description "Pre-CIS-Hardening" -RestorePointType "MODIFY_SETTINGS"

# Account Policies
Write-Host "กำหนดค่า Account Policies..." -ForegroundColor Cyan
# This requires secedit - implement based on findings

# Disable Guest Account
Write-Host "ปิดใช้งาน Guest Account..." -ForegroundColor Cyan
try {
    Disable-LocalUser -Name "Guest"
    Write-Host "ปิดใช้งาน Guest account สำเร็จ" -ForegroundColor Green
}
catch {
    Write-Host "ไม่สามารถปิดใช้งาน Guest account ได้" -ForegroundColor Yellow
}

# Windows Firewall
Write-Host "เปิดใช้งาน Windows Firewall..." -ForegroundColor Cyan
Set-NetFirewallProfile -Profile Domain,Public,Private -Enabled True
Set-NetFirewallProfile -Profile Domain,Public,Private -DefaultInboundAction Block -DefaultOutboundAction Allow

# Enable UAC
Write-Host "เปิดใช้งาน UAC..." -ForegroundColor Cyan
Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System" -Name "EnableLUA" -Value 1 -Force

# Registry Security Settings
Write-Host "กำหนดค่า Registry Security..." -ForegroundColor Cyan
Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\Lsa" -Name "LimitBlankPasswordUse" -Value 1 -Force
Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\Lsa" -Name "NoLMHash" -Value 1 -Force

# PowerShell Execution Policy
Write-Host "กำหนดค่า PowerShell Execution Policy..." -ForegroundColor Cyan
Set-ExecutionPolicy RemoteSigned -Force

# Disable unnecessary services
Write-Host "ปิดใช้งาน services ที่ไม่จำเป็น..." -ForegroundColor Cyan
`$servicesToDisable = @("TlntSvr", "MSFTPSVC", "RemoteRegistry", "Messenger")
foreach (`$service in `$servicesToDisable) {
    try {
        Stop-Service `$service -Force -ErrorAction SilentlyContinue
        Set-Service `$service -StartupType Disabled -ErrorAction SilentlyContinue
        Write-Host "ปิดใช้งาน `$service สำเร็จ" -ForegroundColor Green
    }
    catch {
        Write-Host "ไม่สามารถปิดใช้งาน `$service ได้ (อาจไม่มีการติดตั้ง)" -ForegroundColor Yellow
    }
}

Write-Host "การ hardening เบื้องต้นเสร็จสิ้น" -ForegroundColor Green
Write-Host "แนะนำให้ restart ระบบและรันการตรวจสอบอีกครั้ง" -ForegroundColor Yellow
"@

    $hardeningPath = Join-Path $OutputPath "CIS_Windows_Hardening.ps1"
    $hardeningScript | Out-File -FilePath $hardeningPath -Encoding UTF8
    Write-Host "สร้าง hardening script ไว้ที่: $hardeningPath" -ForegroundColor Green
}

# Main execution
if ($Help) {
    Show-Help
    exit
}

if ($CreateHardening) {
    Initialize-Script
    New-HardeningScript
    exit
}

# Run security audit
try {
    Initialize-Script
    Get-SystemInfo
    Test-AccountPolicies
    Test-LocalPolicies
    Test-WindowsFirewall
    Test-WindowsDefender
    Test-WindowsUpdates
    Show-Summary
    
    Write-Host "`nการตรวจสอบเสร็จสิ้น!" -ForegroundColor $Colors.PASS
}
catch {
    Write-Host "เกิดข้อผิดพลาดในการรัน script: $($_.Exception.Message)" -ForegroundColor Red
    Write-Host "กรุณาตรวจสอบสิทธิ์และการติดตั้ง required modules" -ForegroundColor Yellow
}